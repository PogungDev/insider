"use client";

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Progress } from '@/components/ui/progress';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { AlertTriangle, Play, Shield, Target, Zap, Code, Bug, DollarSign, Clock, CheckCircle, XCircle } from 'lucide-react';
import { useWallet } from '@/app/(core)/providers/WalletProvider';

interface ExploitScenario {
  id: string;
  name: string;
  description: string;
  category: 'reentrancy' | 'flashloan' | 'oracle' | 'governance' | 'access_control' | 'overflow';
  severity: 'low' | 'medium' | 'high' | 'critical';
  targetContract: string;
  estimatedDamage: number;
  complexity: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  prerequisites: string[];
  steps: ExploitStep[];
}

interface ExploitStep {
  id: string;
  order: number;
  action: string;
  description: string;
  code?: string;
  expectedResult: string;
  riskLevel: 'low' | 'medium' | 'high';
}

interface SimulationResult {
  id: string;
  scenarioId: string;
  status: 'success' | 'failed' | 'blocked';
  executionTime: number;
  gasUsed: number;
  profitLoss: number;
  detectedBy: string[];
  vulnerabilityExploited: boolean;
  mitigationTriggered: boolean;
  logs: string[];
}

const ExploitSimulator: React.FC = () => {
  const { targetWallet, analysisData } = useWallet();
  const [scenarios, setScenarios] = useState<ExploitScenario[]>([]);
  const [selectedScenario, setSelectedScenario] = useState<string | null>(null);
  const [simulationResults, setSimulationResults] = useState<SimulationResult[]>([]);
  const [isSimulating, setIsSimulating] = useState(false);
  const [simulationProgress, setSimulationProgress] = useState(0);
  const [customTarget, setCustomTarget] = useState('');
  const [customPayload, setCustomPayload] = useState('');

  useEffect(() => {
    loadExploitScenarios();
    if (targetWallet) {
      setCustomTarget(targetWallet);
    }
  }, [targetWallet, analysisData]);

  const loadExploitScenarios = () => {
    let mockScenarios: ExploitScenario[] = [
      {
        id: 'scenario-1',
        name: 'Reentrancy Attack on DEX',
        description: 'Exploit reentrancy vulnerability in decentralized exchange swap function',
        category: 'reentrancy',
        severity: 'high',
        targetContract: '0x1234567890abcdef1234567890abcdef12345678',
        estimatedDamage: 500000,
        complexity: 'intermediate',
        prerequisites: ['Contract with reentrancy vulnerability', 'Sufficient ETH for gas', 'Malicious contract deployment'],
        steps: [
          {
            id: 'step-1',
            order: 1,
            action: 'Deploy Attack Contract',
            description: 'Deploy malicious contract with fallback function',
            code: 'contract ReentrancyAttack {\n  function attack() external payable {\n    target.withdraw();\n  }\n  fallback() external payable {\n    if (address(target).balance > 0) {\n      target.withdraw();\n    }\n  }\n}',
            expectedResult: 'Attack contract deployed successfully',
            riskLevel: 'medium'
          },
          {
            id: 'step-2',
            order: 2,
            action: 'Initial Deposit',
            description: 'Make initial deposit to establish balance',
            expectedResult: 'Balance recorded in target contract',
            riskLevel: 'low'
          },
          {
            id: 'step-3',
            order: 3,
            action: 'Execute Reentrancy',
            description: 'Call withdraw function to trigger reentrancy',
            expectedResult: 'Multiple withdrawals executed before balance update',
            riskLevel: 'high'
          }
        ]
      },
      {
        id: 'scenario-2',
        name: 'Flash Loan Price Manipulation',
        description: 'Use flash loans to manipulate oracle prices and exploit lending protocols',
        category: 'flashloan',
        severity: 'critical',
        targetContract: '0xabcdef1234567890abcdef1234567890abcdef12',
        estimatedDamage: 2000000,
        complexity: 'advanced',
        prerequisites: ['Flash loan provider', 'DEX with low liquidity', 'Lending protocol using manipulable oracle'],
        steps: [
          {
            id: 'step-4',
            order: 1,
            action: 'Initiate Flash Loan',
            description: 'Borrow large amount without collateral',
            expectedResult: 'Flash loan executed, funds received',
            riskLevel: 'medium'
          },
          {
            id: 'step-5',
            order: 2,
            action: 'Manipulate Price',
            description: 'Use borrowed funds to manipulate token price on DEX',
            expectedResult: 'Token price artificially inflated/deflated',
            riskLevel: 'high'
          },
          {
            id: 'step-6',
            order: 3,
            action: 'Exploit Lending Protocol',
            description: 'Use manipulated price to over-borrow from lending protocol',
            expectedResult: 'Excessive borrowing based on false collateral value',
            riskLevel: 'high'
          },
          {
            id: 'step-7',
            order: 4,
            action: 'Repay Flash Loan',
            description: 'Repay original flash loan with profit',
            expectedResult: 'Flash loan repaid, profit extracted',
            riskLevel: 'medium'
          }
        ]
      },
      {
        id: 'scenario-3',
        name: 'Governance Token Attack',
        description: 'Exploit governance mechanism to drain protocol treasury',
        category: 'governance',
        severity: 'critical',
        targetContract: '0x9876543210fedcba9876543210fedcba98765432',
        estimatedDamage: 1500000,
        complexity: 'expert',
        prerequisites: ['Large governance token holdings', 'Proposal creation rights', 'Voting period manipulation'],
        steps: [
          {
            id: 'step-8',
            order: 1,
            action: 'Acquire Governance Tokens',
            description: 'Accumulate sufficient tokens for proposal creation',
            expectedResult: 'Governance threshold reached',
            riskLevel: 'low'
          },
          {
            id: 'step-9',
            order: 2,
            action: 'Create Malicious Proposal',
            description: 'Submit proposal to transfer treasury funds',
            expectedResult: 'Proposal submitted and queued',
            riskLevel: 'medium'
          },
          {
            id: 'step-10',
            order: 3,
            action: 'Vote Manipulation',
            description: 'Use various techniques to ensure proposal passes',
            expectedResult: 'Proposal approved by governance',
            riskLevel: 'high'
          },
          {
            id: 'step-11',
            order: 4,
            action: 'Execute Proposal',
            description: 'Execute approved proposal to drain treasury',
            expectedResult: 'Treasury funds transferred to attacker',
            riskLevel: 'high'
          }
        ]
      }
    ];

    // Add wallet-specific exploit scenarios if targetWallet is available
    if (targetWallet && analysisData) {
      const walletSpecificScenario: ExploitScenario = {
        id: `scenario-wallet-${targetWallet.slice(-8)}`,
        name: `Target Wallet Vulnerability Test`,
        description: `Simulate potential exploits against wallet ${targetWallet.slice(0, 6)}...${targetWallet.slice(-4)}`,
        category: 'access_control',
        severity: analysisData.riskScore < 60 ? 'high' : 'medium',
        targetContract: targetWallet,
        estimatedDamage: analysisData.totalValue || 100000,
        complexity: analysisData.riskScore < 40 ? 'beginner' : 'intermediate',
        prerequisites: [
          'Target wallet access',
          'Transaction simulation environment',
          'Risk assessment data'
        ],
        steps: [
          {
            id: 'wallet-step-1',
            order: 1,
            action: 'Analyze Wallet Patterns',
            description: `Analyze transaction patterns of wallet ${targetWallet.slice(0, 6)}...${targetWallet.slice(-4)}`,
            expectedResult: 'Pattern analysis completed',
            riskLevel: 'low'
          },
          {
            id: 'wallet-step-2',
            order: 2,
            action: 'Identify Vulnerabilities',
            description: 'Identify potential security vulnerabilities based on wallet behavior',
            expectedResult: `${analysisData.riskScore < 60 ? 'High-risk' : 'Medium-risk'} vulnerabilities identified`,
            riskLevel: analysisData.riskScore < 60 ? 'high' : 'medium'
          },
          {
            id: 'wallet-step-3',
            order: 3,
            action: 'Simulate Attack Vector',
            description: 'Simulate potential attack scenarios against the wallet',
            expectedResult: 'Attack simulation completed with risk assessment',
            riskLevel: analysisData.riskScore < 60 ? 'high' : 'medium'
          }
        ]
      };
      mockScenarios.unshift(walletSpecificScenario);
    }

    setScenarios(mockScenarios);
  };

  const runSimulation = async (scenarioId: string) => {
    setIsSimulating(true);
    setSimulationProgress(0);
    
    // Simulate execution progress
    const interval = setInterval(() => {
      setSimulationProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          
          // Generate mock result
          const result: SimulationResult = {
            id: `result-${Date.now()}`,
            scenarioId,
            status: Math.random() > 0.3 ? 'success' : 'blocked',
            executionTime: Math.floor(Math.random() * 5000) + 1000,
            gasUsed: Math.floor(Math.random() * 500000) + 100000,
            profitLoss: Math.floor(Math.random() * 100000) - 50000,
            detectedBy: Math.random() > 0.5 ? ['Firewall', 'Anomaly Detection'] : [],
            vulnerabilityExploited: Math.random() > 0.4,
            mitigationTriggered: Math.random() > 0.6,
            logs: [
              'Simulation started',
              'Contract interaction initiated',
              'Vulnerability assessment complete',
              'Security measures evaluated',
              'Simulation completed'
            ]
          };
          
          setSimulationResults(prev => [result, ...prev]);
          setIsSimulating(false);
          return 100;
        }
        return prev + 5;
      });
    }, 200);
  };

  const getCategoryColor = (category: string) => {
    const colors = {
      reentrancy: 'bg-red-100 text-red-800 border-red-200',
      flashloan: 'bg-purple-100 text-purple-800 border-purple-200',
      oracle: 'bg-blue-100 text-blue-800 border-blue-200',
      governance: 'bg-orange-100 text-orange-800 border-orange-200',
      access_control: 'bg-yellow-100 text-yellow-800 border-yellow-200',
      overflow: 'bg-green-100 text-green-800 border-green-200'
    };
    return colors[category as keyof typeof colors] || 'bg-gray-100 text-gray-800 border-gray-200';
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getComplexityColor = (complexity: string) => {
    switch (complexity) {
      case 'expert': return 'bg-red-100 text-red-800 border-red-200';
      case 'advanced': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'intermediate': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'beginner': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'success': return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'blocked': return <Shield className="h-4 w-4 text-blue-500" />;
      case 'failed': return <XCircle className="h-4 w-4 text-red-500" />;
      default: return <Clock className="h-4 w-4 text-gray-500" />;
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">Exploit Simulator</h2>
          <p className="text-muted-foreground">
            Controlled environment for testing attack vectors and security vulnerabilities
          </p>
        </div>
        <div className="flex items-center gap-2">
          <Badge variant="outline" className="bg-yellow-50 text-yellow-800 border-yellow-200">
            <AlertTriangle className="h-3 w-3 mr-1" />
            Sandbox Environment
          </Badge>
        </div>
      </div>

      {/* Simulation Progress */}
      {isSimulating && (
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-2">
              <div className="flex items-center justify-between text-sm">
                <span>Exploit Simulation in Progress</span>
                <span>{simulationProgress}% Complete</span>
              </div>
              <Progress value={simulationProgress} className="h-2" />
              <div className="text-xs text-muted-foreground">
                Executing attack scenario in isolated sandbox environment...
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      <Tabs defaultValue="scenarios" className="space-y-4">
        <TabsList>
          <TabsTrigger value="scenarios">Attack Scenarios</TabsTrigger>
          <TabsTrigger value="custom">Custom Exploit</TabsTrigger>
          <TabsTrigger value="results">Simulation Results</TabsTrigger>
          <TabsTrigger value="mitigation">Mitigation Strategies</TabsTrigger>
        </TabsList>

        <TabsContent value="scenarios" className="space-y-4">
          <div className="grid gap-4">
            {scenarios.map((scenario) => (
              <Card key={scenario.id}>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <Target className="h-5 w-5 text-red-500" />
                      <div>
                        <CardTitle className="text-lg">{scenario.name}</CardTitle>
                        <CardDescription>{scenario.description}</CardDescription>
                      </div>
                    </div>
                    <Button 
                      onClick={() => runSimulation(scenario.id)}
                      disabled={isSimulating}
                      className="flex items-center gap-2"
                    >
                      <Play className="h-4 w-4" />
                      Simulate
                    </Button>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex items-center gap-2 flex-wrap">
                      <Badge className={getCategoryColor(scenario.category)}>
                        {scenario.category.replace('_', ' ').toUpperCase()}
                      </Badge>
                      <Badge className={getSeverityColor(scenario.severity)}>
                        {scenario.severity.toUpperCase()}
                      </Badge>
                      <Badge className={getComplexityColor(scenario.complexity)}>
                        {scenario.complexity.toUpperCase()}
                      </Badge>
                    </div>
                    
                    <div className="grid gap-4 md:grid-cols-3">
                      <div className="flex items-center gap-2">
                        <DollarSign className="h-4 w-4 text-red-500" />
                        <div>
                          <div className="font-medium">${scenario.estimatedDamage.toLocaleString()}</div>
                          <div className="text-xs text-muted-foreground">Potential Damage</div>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <Code className="h-4 w-4 text-blue-500" />
                        <div>
                          <div className="font-medium font-mono text-xs">{scenario.targetContract.slice(0, 10)}...</div>
                          <div className="text-xs text-muted-foreground">Target Contract</div>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <Bug className="h-4 w-4 text-orange-500" />
                        <div>
                          <div className="font-medium">{scenario.steps.length} Steps</div>
                          <div className="text-xs text-muted-foreground">Attack Sequence</div>
                        </div>
                      </div>
                    </div>

                    <div>
                      <h4 className="font-medium mb-2">Prerequisites:</h4>
                      <div className="space-y-1">
                        {scenario.prerequisites.map((prereq, index) => (
                          <div key={index} className="flex items-center gap-2 text-sm">
                            <div className="w-1 h-1 bg-blue-500 rounded-full" />
                            {prereq}
                          </div>
                        ))}
                      </div>
                    </div>

                    <div>
                      <h4 className="font-medium mb-2">Attack Steps:</h4>
                      <ScrollArea className="h-32">
                        <div className="space-y-2">
                          {scenario.steps.map((step) => (
                            <div key={step.id} className="flex items-start gap-3 p-2 bg-muted rounded">
                              <Badge variant="outline" className="text-xs">
                                {step.order}
                              </Badge>
                              <div className="flex-1">
                                <div className="font-medium text-sm">{step.action}</div>
                                <div className="text-xs text-muted-foreground">{step.description}</div>
                              </div>
                              <Badge className={getSeverityColor(step.riskLevel)} variant="outline">
                                {step.riskLevel}
                              </Badge>
                            </div>
                          ))}
                        </div>
                      </ScrollArea>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="custom" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Custom Exploit Testing</CardTitle>
              <CardDescription>
                Test custom attack vectors against specific contracts
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <label className="text-sm font-medium mb-2 block">Target Contract Address</label>
                  <Input
                    placeholder="0x..."
                    value={customTarget}
                    onChange={(e) => setCustomTarget(e.target.value)}
                  />
                </div>
                <div>
                  <label className="text-sm font-medium mb-2 block">Attack Payload</label>
                  <Textarea
                    placeholder="Enter your custom exploit code or transaction data..."
                    value={customPayload}
                    onChange={(e) => setCustomPayload(e.target.value)}
                    rows={8}
                  />
                </div>
                <div className="flex items-center gap-2">
                  <Select>
                    <SelectTrigger className="w-48">
                      <SelectValue placeholder="Attack Type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="reentrancy">Reentrancy</SelectItem>
                      <SelectItem value="flashloan">Flash Loan</SelectItem>
                      <SelectItem value="oracle">Oracle Manipulation</SelectItem>
                      <SelectItem value="governance">Governance Attack</SelectItem>
                      <SelectItem value="access_control">Access Control</SelectItem>
                      <SelectItem value="overflow">Integer Overflow</SelectItem>
                    </SelectContent>
                  </Select>
                  <Button 
                    disabled={!customTarget || !customPayload || isSimulating}
                    onClick={() => runSimulation('custom')}
                  >
                    <Play className="h-4 w-4 mr-2" />
                    Run Custom Test
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="results" className="space-y-4">
          {simulationResults.length > 0 ? (
            <div className="space-y-4">
              {simulationResults.map((result) => {
                const scenario = scenarios.find(s => s.id === result.scenarioId);
                return (
                  <Card key={result.id}>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          {getStatusIcon(result.status)}
                          <div>
                            <CardTitle className="text-lg">
                              {scenario?.name || 'Custom Exploit'}
                            </CardTitle>
                            <CardDescription>
                              Executed {new Date().toLocaleString()}
                            </CardDescription>
                          </div>
                        </div>
                        <Badge className={result.status === 'success' ? 'bg-green-100 text-green-800' : 
                                        result.status === 'blocked' ? 'bg-blue-100 text-blue-800' : 
                                        'bg-red-100 text-red-800'}>
                          {result.status.toUpperCase()}
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="grid gap-4 md:grid-cols-4 mb-4">
                        <div className="flex items-center gap-2">
                          <Clock className="h-4 w-4 text-blue-500" />
                          <div>
                            <div className="font-medium">{result.executionTime}ms</div>
                            <div className="text-xs text-muted-foreground">Execution Time</div>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <Zap className="h-4 w-4 text-yellow-500" />
                          <div>
                            <div className="font-medium">{result.gasUsed.toLocaleString()}</div>
                            <div className="text-xs text-muted-foreground">Gas Used</div>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <DollarSign className={`h-4 w-4 ${result.profitLoss >= 0 ? 'text-green-500' : 'text-red-500'}`} />
                          <div>
                            <div className={`font-medium ${result.profitLoss >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                              ${Math.abs(result.profitLoss).toLocaleString()}
                            </div>
                            <div className="text-xs text-muted-foreground">
                              {result.profitLoss >= 0 ? 'Profit' : 'Loss'}
                            </div>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <Shield className="h-4 w-4 text-purple-500" />
                          <div>
                            <div className="font-medium">{result.detectedBy.length}</div>
                            <div className="text-xs text-muted-foreground">Detections</div>
                          </div>
                        </div>
                      </div>
                      
                      {result.detectedBy.length > 0 && (
                        <div className="mb-4">
                          <h4 className="font-medium mb-2">Detected By:</h4>
                          <div className="flex gap-2 flex-wrap">
                            {result.detectedBy.map((detector, index) => (
                              <Badge key={index} variant="outline">{detector}</Badge>
                            ))}
                          </div>
                        </div>
                      )}
                      
                      <div className="space-y-2">
                        <h4 className="font-medium">Execution Log:</h4>
                        <ScrollArea className="h-24 bg-muted p-2 rounded text-xs font-mono">
                          {result.logs.map((log, index) => (
                            <div key={index}>{log}</div>
                          ))}
                        </ScrollArea>
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          ) : (
            <Card>
              <CardContent className="pt-6 text-center">
                <Target className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <p className="text-muted-foreground">No simulation results yet. Run a scenario to see results here.</p>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        <TabsContent value="mitigation" className="space-y-4">
          <div className="grid gap-4 md:grid-cols-2">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Shield className="h-5 w-5" />
                  Prevention Strategies
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="p-3 bg-green-50 rounded-lg border border-green-200">
                    <p className="text-sm font-medium text-green-900">Reentrancy Protection</p>
                    <p className="text-sm text-green-700 mt-1">
                      Implement reentrancy guards and follow checks-effects-interactions pattern.
                    </p>
                  </div>
                  <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
                    <p className="text-sm font-medium text-blue-900">Oracle Security</p>
                    <p className="text-sm text-blue-700 mt-1">
                      Use multiple oracle sources and implement price deviation checks.
                    </p>
                  </div>
                  <div className="p-3 bg-purple-50 rounded-lg border border-purple-200">
                    <p className="text-sm font-medium text-purple-900">Access Control</p>
                    <p className="text-sm text-purple-700 mt-1">
                      Implement proper role-based access control and multi-signature requirements.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <AlertTriangle className="h-5 w-5" />
                  Detection Methods
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="p-3 bg-yellow-50 rounded-lg border border-yellow-200">
                    <p className="text-sm font-medium text-yellow-900">Anomaly Detection</p>
                    <p className="text-sm text-yellow-700 mt-1">
                      Monitor for unusual transaction patterns and gas usage spikes.
                    </p>
                  </div>
                  <div className="p-3 bg-red-50 rounded-lg border border-red-200">
                    <p className="text-sm font-medium text-red-900">Real-time Monitoring</p>
                    <p className="text-sm text-red-700 mt-1">
                      Implement circuit breakers and automatic pause mechanisms.
                    </p>
                  </div>
                  <div className="p-3 bg-orange-50 rounded-lg border border-orange-200">
                    <p className="text-sm font-medium text-orange-900">Code Analysis</p>
                    <p className="text-sm text-orange-700 mt-1">
                      Regular security audits and automated vulnerability scanning.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default ExploitSimulator;
